<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180" total_samples="2875"><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.03%)</title><rect x="0.0000%" y="261" width="0.0348%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.10%)</title><rect x="0.0348%" y="165" width="0.1043%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="3"/><text x="0.2848%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (9 samples, 0.31%)</title><rect x="0.1391%" y="165" width="0.3130%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="9"/><text x="0.3891%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (17 samples, 0.59%)</title><rect x="0.4522%" y="165" width="0.5913%" height="15" fill="rgb(248,212,6)" fg:x="13" fg:w="17"/><text x="0.7022%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (4 samples, 0.14%)</title><rect x="1.0435%" y="165" width="0.1391%" height="15" fill="rgb(208,68,35)" fg:x="30" fg:w="4"/><text x="1.2935%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (13 samples, 0.45%)</title><rect x="1.1826%" y="165" width="0.4522%" height="15" fill="rgb(232,128,0)" fg:x="34" fg:w="13"/><text x="1.4326%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (48 samples, 1.67%)</title><rect x="1.6348%" y="165" width="1.6696%" height="15" fill="rgb(207,160,47)" fg:x="47" fg:w="48"/><text x="1.8848%" y="175.50"></text></g><g><title>microphp`&lt;alloc::string::String as core::clone::Clone&gt;::clone (5 samples, 0.17%)</title><rect x="3.3043%" y="165" width="0.1739%" height="15" fill="rgb(228,23,34)" fg:x="95" fg:w="5"/><text x="3.5543%" y="175.50"></text></g><g><title>microphp`DYLD-STUB$$free (4 samples, 0.14%)</title><rect x="3.4783%" y="165" width="0.1391%" height="15" fill="rgb(218,30,26)" fg:x="100" fg:w="4"/><text x="3.7283%" y="175.50"></text></g><g><title>microphp`__rdl_dealloc (2 samples, 0.07%)</title><rect x="3.6174%" y="165" width="0.0696%" height="15" fill="rgb(220,122,19)" fg:x="104" fg:w="2"/><text x="3.8674%" y="175.50"></text></g><g><title>microphp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.03%)</title><rect x="3.6870%" y="165" width="0.0348%" height="15" fill="rgb(250,228,42)" fg:x="106" fg:w="1"/><text x="3.9370%" y="175.50"></text></g><g><title>microphp`core::ptr::drop_in_place&lt;microphp::vm::Frame&gt; (1 samples, 0.03%)</title><rect x="3.7217%" y="165" width="0.0348%" height="15" fill="rgb(240,193,28)" fg:x="107" fg:w="1"/><text x="3.9717%" y="175.50"></text></g><g><title>microphp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.07%)</title><rect x="3.7565%" y="165" width="0.0696%" height="15" fill="rgb(216,20,37)" fg:x="108" fg:w="2"/><text x="4.0065%" y="175.50"></text></g><g><title>microphp`microphp::globals::Globals::is_user_function (2 samples, 0.07%)</title><rect x="3.8261%" y="165" width="0.0696%" height="15" fill="rgb(206,188,39)" fg:x="110" fg:w="2"/><text x="4.0761%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.38%)</title><rect x="18.6087%" y="149" width="0.3826%" height="15" fill="rgb(217,207,13)" fg:x="535" fg:w="11"/><text x="18.8587%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (8 samples, 0.28%)</title><rect x="18.9913%" y="149" width="0.2783%" height="15" fill="rgb(231,73,38)" fg:x="546" fg:w="8"/><text x="19.2413%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (102 samples, 3.55%)</title><rect x="19.2696%" y="149" width="3.5478%" height="15" fill="rgb(225,20,46)" fg:x="554" fg:w="102"/><text x="19.5196%" y="159.50">libs..</text></g><g><title>libsystem_malloc.dylib`szone_size (36 samples, 1.25%)</title><rect x="21.5652%" y="133" width="1.2522%" height="15" fill="rgb(210,31,41)" fg:x="620" fg:w="36"/><text x="21.8152%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (31 samples, 1.08%)</title><rect x="21.7391%" y="117" width="1.0783%" height="15" fill="rgb(221,200,47)" fg:x="625" fg:w="31"/><text x="21.9891%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (45 samples, 1.57%)</title><rect x="22.8174%" y="149" width="1.5652%" height="15" fill="rgb(226,26,5)" fg:x="656" fg:w="45"/><text x="23.0674%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (10 samples, 0.35%)</title><rect x="24.3826%" y="149" width="0.3478%" height="15" fill="rgb(249,33,26)" fg:x="701" fg:w="10"/><text x="24.6326%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (10 samples, 0.35%)</title><rect x="24.7304%" y="149" width="0.3478%" height="15" fill="rgb(235,183,28)" fg:x="711" fg:w="10"/><text x="24.9804%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (24 samples, 0.83%)</title><rect x="25.0783%" y="149" width="0.8348%" height="15" fill="rgb(221,5,38)" fg:x="721" fg:w="24"/><text x="25.3283%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.10%)</title><rect x="28.2087%" y="101" width="0.1043%" height="15" fill="rgb(247,18,42)" fg:x="811" fg:w="3"/><text x="28.4587%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (91 samples, 3.17%)</title><rect x="28.0000%" y="117" width="3.1652%" height="15" fill="rgb(241,131,45)" fg:x="805" fg:w="91"/><text x="28.2500%" y="127.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (82 samples, 2.85%)</title><rect x="28.3130%" y="101" width="2.8522%" height="15" fill="rgb(249,31,29)" fg:x="814" fg:w="82"/><text x="28.5630%" y="111.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (20 samples, 0.70%)</title><rect x="30.4696%" y="85" width="0.6957%" height="15" fill="rgb(225,111,53)" fg:x="876" fg:w="20"/><text x="30.7196%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (136 samples, 4.73%)</title><rect x="26.5391%" y="133" width="4.7304%" height="15" fill="rgb(238,160,17)" fg:x="763" fg:w="136"/><text x="26.7891%" y="143.50">libsys..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.10%)</title><rect x="31.1652%" y="117" width="0.1043%" height="15" fill="rgb(214,148,48)" fg:x="896" fg:w="3"/><text x="31.4152%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.10%)</title><rect x="31.2696%" y="133" width="0.1043%" height="15" fill="rgb(232,36,49)" fg:x="899" fg:w="3"/><text x="31.5196%" y="143.50"></text></g><g><title>microphp`&lt;alloc::string::String as core::clone::Clone&gt;::clone (159 samples, 5.53%)</title><rect x="25.9130%" y="149" width="5.5304%" height="15" fill="rgb(209,103,24)" fg:x="745" fg:w="159"/><text x="26.1630%" y="159.50">microph..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.07%)</title><rect x="31.3739%" y="133" width="0.0696%" height="15" fill="rgb(229,88,8)" fg:x="902" fg:w="2"/><text x="31.6239%" y="143.50"></text></g><g><title>microphp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="31.4435%" y="149" width="0.0348%" height="15" fill="rgb(213,181,19)" fg:x="904" fg:w="1"/><text x="31.6935%" y="159.50"></text></g><g><title>microphp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (38 samples, 1.32%)</title><rect x="31.4783%" y="149" width="1.3217%" height="15" fill="rgb(254,191,54)" fg:x="905" fg:w="38"/><text x="31.7283%" y="159.50"></text></g><g><title>microphp`DYLD-STUB$$free (3 samples, 0.10%)</title><rect x="32.8000%" y="149" width="0.1043%" height="15" fill="rgb(241,83,37)" fg:x="943" fg:w="3"/><text x="33.0500%" y="159.50"></text></g><g><title>microphp`DYLD-STUB$$malloc (6 samples, 0.21%)</title><rect x="32.9043%" y="149" width="0.2087%" height="15" fill="rgb(233,36,39)" fg:x="946" fg:w="6"/><text x="33.1543%" y="159.50"></text></g><g><title>microphp`DYLD-STUB$$memcpy (2 samples, 0.07%)</title><rect x="33.1130%" y="149" width="0.0696%" height="15" fill="rgb(226,3,54)" fg:x="952" fg:w="2"/><text x="33.3630%" y="159.50"></text></g><g><title>microphp`__rdl_alloc (5 samples, 0.17%)</title><rect x="33.1826%" y="149" width="0.1739%" height="15" fill="rgb(245,192,40)" fg:x="954" fg:w="5"/><text x="33.4326%" y="159.50"></text></g><g><title>microphp`__rdl_dealloc (2 samples, 0.07%)</title><rect x="33.3565%" y="149" width="0.0696%" height="15" fill="rgb(238,167,29)" fg:x="959" fg:w="2"/><text x="33.6065%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="34.3304%" y="85" width="0.0348%" height="15" fill="rgb(232,182,51)" fg:x="987" fg:w="1"/><text x="34.5804%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (9 samples, 0.31%)</title><rect x="34.5739%" y="69" width="0.3130%" height="15" fill="rgb(231,60,39)" fg:x="994" fg:w="9"/><text x="34.8239%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (28 samples, 0.97%)</title><rect x="34.1565%" y="101" width="0.9739%" height="15" fill="rgb(208,69,12)" fg:x="982" fg:w="28"/><text x="34.4065%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (22 samples, 0.77%)</title><rect x="34.3652%" y="85" width="0.7652%" height="15" fill="rgb(235,93,37)" fg:x="988" fg:w="22"/><text x="34.6152%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.24%)</title><rect x="34.8870%" y="69" width="0.2435%" height="15" fill="rgb(213,116,39)" fg:x="1003" fg:w="7"/><text x="35.1370%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (41 samples, 1.43%)</title><rect x="33.7739%" y="117" width="1.4261%" height="15" fill="rgb(222,207,29)" fg:x="971" fg:w="41"/><text x="34.0239%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.07%)</title><rect x="35.1304%" y="101" width="0.0696%" height="15" fill="rgb(206,96,30)" fg:x="1010" fg:w="2"/><text x="35.3804%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.10%)</title><rect x="35.2000%" y="117" width="0.1043%" height="15" fill="rgb(218,138,4)" fg:x="1012" fg:w="3"/><text x="35.4500%" y="127.50"></text></g><g><title>microphp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (56 samples, 1.95%)</title><rect x="33.4261%" y="149" width="1.9478%" height="15" fill="rgb(250,191,14)" fg:x="961" fg:w="56"/><text x="33.6761%" y="159.50">m..</text></g><g><title>microphp`alloc::raw_vec::finish_grow (48 samples, 1.67%)</title><rect x="33.7043%" y="133" width="1.6696%" height="15" fill="rgb(239,60,40)" fg:x="969" fg:w="48"/><text x="33.9543%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.07%)</title><rect x="35.3043%" y="117" width="0.0696%" height="15" fill="rgb(206,27,48)" fg:x="1015" fg:w="2"/><text x="35.5543%" y="127.50"></text></g><g><title>microphp`alloc::raw_vec::finish_grow (4 samples, 0.14%)</title><rect x="35.3739%" y="149" width="0.1391%" height="15" fill="rgb(225,35,8)" fg:x="1017" fg:w="4"/><text x="35.6239%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (14 samples, 0.49%)</title><rect x="35.6174%" y="133" width="0.4870%" height="15" fill="rgb(250,213,24)" fg:x="1024" fg:w="14"/><text x="35.8674%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (99 samples, 3.44%)</title><rect x="36.1043%" y="133" width="3.4435%" height="15" fill="rgb(247,123,22)" fg:x="1038" fg:w="99"/><text x="36.3543%" y="143.50">lib..</text></g><g><title>libsystem_malloc.dylib`szone_size (38 samples, 1.32%)</title><rect x="38.2261%" y="117" width="1.3217%" height="15" fill="rgb(231,138,38)" fg:x="1099" fg:w="38"/><text x="38.4761%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (33 samples, 1.15%)</title><rect x="38.4000%" y="101" width="1.1478%" height="15" fill="rgb(231,145,46)" fg:x="1104" fg:w="33"/><text x="38.6500%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (18 samples, 0.63%)</title><rect x="43.3391%" y="101" width="0.6261%" height="15" fill="rgb(251,118,11)" fg:x="1246" fg:w="18"/><text x="43.5891%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (165 samples, 5.74%)</title><rect x="39.5478%" y="133" width="5.7391%" height="15" fill="rgb(217,147,25)" fg:x="1137" fg:w="165"/><text x="39.7978%" y="143.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (127 samples, 4.42%)</title><rect x="40.8696%" y="117" width="4.4174%" height="15" fill="rgb(247,81,37)" fg:x="1175" fg:w="127"/><text x="41.1196%" y="127.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (38 samples, 1.32%)</title><rect x="43.9652%" y="101" width="1.3217%" height="15" fill="rgb(209,12,38)" fg:x="1264" fg:w="38"/><text x="44.2152%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (15 samples, 0.52%)</title><rect x="45.2870%" y="133" width="0.5217%" height="15" fill="rgb(227,1,9)" fg:x="1302" fg:w="15"/><text x="45.5370%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (6 samples, 0.21%)</title><rect x="45.8087%" y="133" width="0.2087%" height="15" fill="rgb(248,47,43)" fg:x="1317" fg:w="6"/><text x="46.0587%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.14%)</title><rect x="46.0174%" y="133" width="0.1391%" height="15" fill="rgb(221,10,30)" fg:x="1323" fg:w="4"/><text x="46.2674%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (65 samples, 2.26%)</title><rect x="50.6087%" y="101" width="2.2609%" height="15" fill="rgb(210,229,1)" fg:x="1455" fg:w="65"/><text x="50.8587%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_size (52 samples, 1.81%)</title><rect x="51.0609%" y="85" width="1.8087%" height="15" fill="rgb(222,148,37)" fg:x="1468" fg:w="52"/><text x="51.3109%" y="95.50">l..</text></g><g><title>libsystem_malloc.dylib`free (147 samples, 5.11%)</title><rect x="47.7913%" y="117" width="5.1130%" height="15" fill="rgb(234,67,33)" fg:x="1374" fg:w="147"/><text x="48.0413%" y="127.50">libsys..</text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.03%)</title><rect x="52.8696%" y="101" width="0.0348%" height="15" fill="rgb(247,98,35)" fg:x="1520" fg:w="1"/><text x="53.1196%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (76 samples, 2.64%)</title><rect x="58.8174%" y="85" width="2.6435%" height="15" fill="rgb(247,138,52)" fg:x="1691" fg:w="76"/><text x="59.0674%" y="95.50">li..</text></g><g><title>libsystem_malloc.dylib`free_tiny (305 samples, 10.61%)</title><rect x="52.9043%" y="117" width="10.6087%" height="15" fill="rgb(213,79,30)" fg:x="1521" fg:w="305"/><text x="53.1543%" y="127.50">libsystem_mallo..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (240 samples, 8.35%)</title><rect x="55.1652%" y="101" width="8.3478%" height="15" fill="rgb(246,177,23)" fg:x="1586" fg:w="240"/><text x="55.4152%" y="111.50">libsystem_ma..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (59 samples, 2.05%)</title><rect x="61.4609%" y="85" width="2.0522%" height="15" fill="rgb(230,62,27)" fg:x="1767" fg:w="59"/><text x="61.7109%" y="95.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (19 samples, 0.66%)</title><rect x="63.5130%" y="117" width="0.6609%" height="15" fill="rgb(216,154,8)" fg:x="1826" fg:w="19"/><text x="63.7630%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (5 samples, 0.17%)</title><rect x="64.1739%" y="117" width="0.1739%" height="15" fill="rgb(244,35,45)" fg:x="1845" fg:w="5"/><text x="64.4239%" y="127.50"></text></g><g><title>microphp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (533 samples, 18.54%)</title><rect x="46.1565%" y="133" width="18.5391%" height="15" fill="rgb(251,115,12)" fg:x="1327" fg:w="533"/><text x="46.4065%" y="143.50">microphp`&lt;alloc::vec::Vec&lt;T,A..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (10 samples, 0.35%)</title><rect x="64.3478%" y="117" width="0.3478%" height="15" fill="rgb(240,54,50)" fg:x="1850" fg:w="10"/><text x="64.5978%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (22 samples, 0.77%)</title><rect x="64.9043%" y="117" width="0.7652%" height="15" fill="rgb(233,84,52)" fg:x="1866" fg:w="22"/><text x="65.1543%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (12 samples, 0.42%)</title><rect x="65.2522%" y="101" width="0.4174%" height="15" fill="rgb(207,117,47)" fg:x="1876" fg:w="12"/><text x="65.5022%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (9 samples, 0.31%)</title><rect x="65.3565%" y="85" width="0.3130%" height="15" fill="rgb(249,43,39)" fg:x="1879" fg:w="9"/><text x="65.6065%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.24%)</title><rect x="66.4696%" y="85" width="0.2435%" height="15" fill="rgb(209,38,44)" fg:x="1911" fg:w="7"/><text x="66.7196%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (39 samples, 1.36%)</title><rect x="65.6696%" y="117" width="1.3565%" height="15" fill="rgb(236,212,23)" fg:x="1888" fg:w="39"/><text x="65.9196%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (31 samples, 1.08%)</title><rect x="65.9478%" y="101" width="1.0783%" height="15" fill="rgb(242,79,21)" fg:x="1896" fg:w="31"/><text x="66.1978%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (9 samples, 0.31%)</title><rect x="66.7130%" y="85" width="0.3130%" height="15" fill="rgb(211,96,35)" fg:x="1918" fg:w="9"/><text x="66.9630%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (7 samples, 0.24%)</title><rect x="67.0261%" y="117" width="0.2435%" height="15" fill="rgb(253,215,40)" fg:x="1927" fg:w="7"/><text x="67.2761%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.07%)</title><rect x="67.2696%" y="117" width="0.0696%" height="15" fill="rgb(211,81,21)" fg:x="1934" fg:w="2"/><text x="67.5196%" y="127.50"></text></g><g><title>microphp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (77 samples, 2.68%)</title><rect x="64.6957%" y="133" width="2.6783%" height="15" fill="rgb(208,190,38)" fg:x="1860" fg:w="77"/><text x="64.9457%" y="143.50">mi..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.03%)</title><rect x="67.3391%" y="117" width="0.0348%" height="15" fill="rgb(235,213,38)" fg:x="1936" fg:w="1"/><text x="67.5891%" y="127.50"></text></g><g><title>microphp`core::ptr::drop_in_place&lt;microphp::vm::Frame&gt; (925 samples, 32.17%)</title><rect x="35.5130%" y="149" width="32.1739%" height="15" fill="rgb(237,122,38)" fg:x="1021" fg:w="925"/><text x="35.7630%" y="159.50">microphp`core::ptr::drop_in_place&lt;microphp::vm::Fram..</text></g><g><title>microphp`DYLD-STUB$$free (9 samples, 0.31%)</title><rect x="67.3739%" y="133" width="0.3130%" height="15" fill="rgb(244,218,35)" fg:x="1937" fg:w="9"/><text x="67.6239%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.07%)</title><rect x="68.4522%" y="101" width="0.0696%" height="15" fill="rgb(240,68,47)" fg:x="1968" fg:w="2"/><text x="68.7022%" y="111.50"></text></g><g><title>microphp`__rdl_alloc (1 samples, 0.03%)</title><rect x="68.5217%" y="101" width="0.0348%" height="15" fill="rgb(210,16,53)" fg:x="1970" fg:w="1"/><text x="68.7717%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.10%)</title><rect x="68.9043%" y="53" width="0.1043%" height="15" fill="rgb(235,124,12)" fg:x="1981" fg:w="3"/><text x="69.1543%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (30 samples, 1.04%)</title><rect x="69.4957%" y="37" width="1.0435%" height="15" fill="rgb(224,169,11)" fg:x="1998" fg:w="30"/><text x="69.7457%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (65 samples, 2.26%)</title><rect x="68.8000%" y="69" width="2.2609%" height="15" fill="rgb(250,166,2)" fg:x="1978" fg:w="65"/><text x="69.0500%" y="79.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (59 samples, 2.05%)</title><rect x="69.0087%" y="53" width="2.0522%" height="15" fill="rgb(242,216,29)" fg:x="1984" fg:w="59"/><text x="69.2587%" y="63.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (15 samples, 0.52%)</title><rect x="70.5391%" y="37" width="0.5217%" height="15" fill="rgb(230,116,27)" fg:x="2028" fg:w="15"/><text x="70.7891%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (72 samples, 2.50%)</title><rect x="68.6957%" y="85" width="2.5043%" height="15" fill="rgb(228,99,48)" fg:x="1975" fg:w="72"/><text x="68.9457%" y="95.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.14%)</title><rect x="71.0609%" y="69" width="0.1391%" height="15" fill="rgb(253,11,6)" fg:x="2043" fg:w="4"/><text x="71.3109%" y="79.50"></text></g><g><title>microphp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (97 samples, 3.37%)</title><rect x="67.9304%" y="133" width="3.3739%" height="15" fill="rgb(247,143,39)" fg:x="1953" fg:w="97"/><text x="68.1804%" y="143.50">mic..</text></g><g><title>microphp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (90 samples, 3.13%)</title><rect x="68.1739%" y="117" width="3.1304%" height="15" fill="rgb(236,97,10)" fg:x="1960" fg:w="90"/><text x="68.4239%" y="127.50">mic..</text></g><g><title>microphp`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (79 samples, 2.75%)</title><rect x="68.5565%" y="101" width="2.7478%" height="15" fill="rgb(233,208,19)" fg:x="1971" fg:w="79"/><text x="68.8065%" y="111.50">mi..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.10%)</title><rect x="71.2000%" y="85" width="0.1043%" height="15" fill="rgb(216,164,2)" fg:x="2047" fg:w="3"/><text x="71.4500%" y="95.50"></text></g><g><title>microphp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (106 samples, 3.69%)</title><rect x="67.6870%" y="149" width="3.6870%" height="15" fill="rgb(220,129,5)" fg:x="1946" fg:w="106"/><text x="67.9370%" y="159.50">micr..</text></g><g><title>microphp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.07%)</title><rect x="71.3043%" y="133" width="0.0696%" height="15" fill="rgb(242,17,10)" fg:x="2050" fg:w="2"/><text x="71.5543%" y="143.50"></text></g><g><title>microphp`hashbrown::map::make_hash (32 samples, 1.11%)</title><rect x="71.3739%" y="149" width="1.1130%" height="15" fill="rgb(242,107,0)" fg:x="2052" fg:w="32"/><text x="71.6239%" y="159.50"></text></g><g><title>microphp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.03%)</title><rect x="72.4870%" y="149" width="0.0348%" height="15" fill="rgb(251,28,31)" fg:x="2084" fg:w="1"/><text x="72.7370%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.07%)</title><rect x="77.0783%" y="101" width="0.0696%" height="15" fill="rgb(233,223,10)" fg:x="2216" fg:w="2"/><text x="77.3283%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (35 samples, 1.22%)</title><rect x="77.3565%" y="85" width="1.2174%" height="15" fill="rgb(215,21,27)" fg:x="2224" fg:w="35"/><text x="77.6065%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (113 samples, 3.93%)</title><rect x="75.6174%" y="133" width="3.9304%" height="15" fill="rgb(232,23,21)" fg:x="2174" fg:w="113"/><text x="75.8674%" y="143.50">libs..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (75 samples, 2.61%)</title><rect x="76.9391%" y="117" width="2.6087%" height="15" fill="rgb(244,5,23)" fg:x="2212" fg:w="75"/><text x="77.1891%" y="127.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (69 samples, 2.40%)</title><rect x="77.1478%" y="101" width="2.4000%" height="15" fill="rgb(226,81,46)" fg:x="2218" fg:w="69"/><text x="77.3978%" y="111.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (28 samples, 0.97%)</title><rect x="78.5739%" y="85" width="0.9739%" height="15" fill="rgb(247,70,30)" fg:x="2259" fg:w="28"/><text x="78.8239%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.03%)</title><rect x="79.5478%" y="133" width="0.0348%" height="15" fill="rgb(212,68,19)" fg:x="2287" fg:w="1"/><text x="79.7978%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="79.5826%" y="133" width="0.0348%" height="15" fill="rgb(240,187,13)" fg:x="2288" fg:w="1"/><text x="79.8326%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (7 samples, 0.24%)</title><rect x="79.6174%" y="133" width="0.2435%" height="15" fill="rgb(223,113,26)" fg:x="2289" fg:w="7"/><text x="79.8674%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (39 samples, 1.36%)</title><rect x="79.8609%" y="133" width="1.3565%" height="15" fill="rgb(206,192,2)" fg:x="2296" fg:w="39"/><text x="80.1109%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (27 samples, 0.94%)</title><rect x="84.7304%" y="85" width="0.9391%" height="15" fill="rgb(241,108,4)" fg:x="2436" fg:w="27"/><text x="84.9804%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (214 samples, 7.44%)</title><rect x="83.8957%" y="101" width="7.4435%" height="15" fill="rgb(247,173,49)" fg:x="2412" fg:w="214"/><text x="84.1457%" y="111.50">libsystem_..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (163 samples, 5.67%)</title><rect x="85.6696%" y="85" width="5.6696%" height="15" fill="rgb(224,114,35)" fg:x="2463" fg:w="163"/><text x="85.9196%" y="95.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (84 samples, 2.92%)</title><rect x="88.4174%" y="69" width="2.9217%" height="15" fill="rgb(245,159,27)" fg:x="2542" fg:w="84"/><text x="88.6674%" y="79.50">li..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (280 samples, 9.74%)</title><rect x="81.9130%" y="117" width="9.7391%" height="15" fill="rgb(245,172,44)" fg:x="2355" fg:w="280"/><text x="82.1630%" y="127.50">libsystem_mall..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (9 samples, 0.31%)</title><rect x="91.3391%" y="101" width="0.3130%" height="15" fill="rgb(236,23,11)" fg:x="2626" fg:w="9"/><text x="91.5891%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (13 samples, 0.45%)</title><rect x="91.6522%" y="117" width="0.4522%" height="15" fill="rgb(205,117,38)" fg:x="2635" fg:w="13"/><text x="91.9022%" y="127.50"></text></g><g><title>microphp`&lt;alloc::string::String as core::clone::Clone&gt;::clone (318 samples, 11.06%)</title><rect x="81.2174%" y="133" width="11.0609%" height="15" fill="rgb(237,72,25)" fg:x="2335" fg:w="318"/><text x="81.4674%" y="143.50">microphp`&lt;alloc:..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.17%)</title><rect x="92.1043%" y="117" width="0.1739%" height="15" fill="rgb(244,70,9)" fg:x="2648" fg:w="5"/><text x="92.3543%" y="127.50"></text></g><g><title>microphp`DYLD-STUB$$malloc (2 samples, 0.07%)</title><rect x="92.2783%" y="133" width="0.0696%" height="15" fill="rgb(217,125,39)" fg:x="2653" fg:w="2"/><text x="92.5283%" y="143.50"></text></g><g><title>microphp`DYLD-STUB$$memcpy (6 samples, 0.21%)</title><rect x="92.3478%" y="133" width="0.2087%" height="15" fill="rgb(235,36,10)" fg:x="2655" fg:w="6"/><text x="92.5978%" y="143.50"></text></g><g><title>microphp`__rdl_alloc (5 samples, 0.17%)</title><rect x="92.5565%" y="133" width="0.1739%" height="15" fill="rgb(251,123,47)" fg:x="2661" fg:w="5"/><text x="92.8065%" y="143.50"></text></g><g><title>microphp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (13 samples, 0.45%)</title><rect x="93.0087%" y="117" width="0.4522%" height="15" fill="rgb(221,13,13)" fg:x="2674" fg:w="13"/><text x="93.2587%" y="127.50"></text></g><g><title>microphp`microphp::globals::Globals::get_user_function (616 samples, 21.43%)</title><rect x="72.5217%" y="149" width="21.4261%" height="15" fill="rgb(238,131,9)" fg:x="2085" fg:w="616"/><text x="72.7717%" y="159.50">microphp`microphp::globals::Global..</text></g><g><title>microphp`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (35 samples, 1.22%)</title><rect x="92.7304%" y="133" width="1.2174%" height="15" fill="rgb(211,50,8)" fg:x="2666" fg:w="35"/><text x="92.9804%" y="143.50"></text></g><g><title>microphp`hashbrown::map::make_hash (14 samples, 0.49%)</title><rect x="93.4609%" y="117" width="0.4870%" height="15" fill="rgb(245,182,24)" fg:x="2687" fg:w="14"/><text x="93.7109%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (10 samples, 0.35%)</title><rect x="94.4000%" y="117" width="0.3478%" height="15" fill="rgb(242,14,37)" fg:x="2714" fg:w="10"/><text x="94.6500%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (7 samples, 0.24%)</title><rect x="94.5043%" y="101" width="0.2435%" height="15" fill="rgb(246,228,12)" fg:x="2717" fg:w="7"/><text x="94.7543%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (24 samples, 0.83%)</title><rect x="93.9826%" y="133" width="0.8348%" height="15" fill="rgb(213,55,15)" fg:x="2702" fg:w="24"/><text x="94.2326%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.07%)</title><rect x="94.7478%" y="117" width="0.0696%" height="15" fill="rgb(209,9,3)" fg:x="2724" fg:w="2"/><text x="94.9978%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (35 samples, 1.22%)</title><rect x="94.8174%" y="133" width="1.2174%" height="15" fill="rgb(230,59,30)" fg:x="2726" fg:w="35"/><text x="95.0674%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (26 samples, 0.90%)</title><rect x="95.1304%" y="117" width="0.9043%" height="15" fill="rgb(209,121,21)" fg:x="2735" fg:w="26"/><text x="95.3804%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (9 samples, 0.31%)</title><rect x="95.7217%" y="101" width="0.3130%" height="15" fill="rgb(220,109,13)" fg:x="2752" fg:w="9"/><text x="95.9717%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (1 samples, 0.03%)</title><rect x="96.0348%" y="133" width="0.0348%" height="15" fill="rgb(232,18,1)" fg:x="2761" fg:w="1"/><text x="96.2848%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.07%)</title><rect x="96.0696%" y="133" width="0.0696%" height="15" fill="rgb(215,41,42)" fg:x="2762" fg:w="2"/><text x="96.3196%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.21%)</title><rect x="96.1391%" y="133" width="0.2087%" height="15" fill="rgb(224,123,36)" fg:x="2764" fg:w="6"/><text x="96.3891%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (6 samples, 0.21%)</title><rect x="96.3478%" y="133" width="0.2087%" height="15" fill="rgb(240,125,3)" fg:x="2770" fg:w="6"/><text x="96.5978%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.10%)</title><rect x="96.5565%" y="133" width="0.1043%" height="15" fill="rgb(205,98,50)" fg:x="2776" fg:w="3"/><text x="96.8065%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 0.17%)</title><rect x="97.1130%" y="85" width="0.1739%" height="15" fill="rgb(205,185,37)" fg:x="2792" fg:w="5"/><text x="97.3630%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (46 samples, 1.60%)</title><rect x="96.9739%" y="101" width="1.6000%" height="15" fill="rgb(238,207,15)" fg:x="2788" fg:w="46"/><text x="97.2239%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (37 samples, 1.29%)</title><rect x="97.2870%" y="85" width="1.2870%" height="15" fill="rgb(213,199,42)" fg:x="2797" fg:w="37"/><text x="97.5370%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (25 samples, 0.87%)</title><rect x="97.7043%" y="69" width="0.8696%" height="15" fill="rgb(235,201,11)" fg:x="2809" fg:w="25"/><text x="97.9543%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.24%)</title><rect x="98.3304%" y="53" width="0.2435%" height="15" fill="rgb(207,46,11)" fg:x="2827" fg:w="7"/><text x="98.5804%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (54 samples, 1.88%)</title><rect x="96.8348%" y="117" width="1.8783%" height="15" fill="rgb(241,35,35)" fg:x="2784" fg:w="54"/><text x="97.0848%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.14%)</title><rect x="98.5739%" y="101" width="0.1391%" height="15" fill="rgb(243,32,47)" fg:x="2834" fg:w="4"/><text x="98.8239%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.07%)</title><rect x="98.7130%" y="117" width="0.0696%" height="15" fill="rgb(247,202,23)" fg:x="2838" fg:w="2"/><text x="98.9630%" y="127.50"></text></g><g><title>microphp`&lt;alloc::string::String as core::clone::Clone&gt;::clone (62 samples, 2.16%)</title><rect x="96.6609%" y="133" width="2.1565%" height="15" fill="rgb(219,102,11)" fg:x="2779" fg:w="62"/><text x="96.9109%" y="143.50">m..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="98.7826%" y="117" width="0.0348%" height="15" fill="rgb(243,110,44)" fg:x="2840" fg:w="1"/><text x="99.0326%" y="127.50"></text></g><g><title>microphp`DYLD-STUB$$memcmp (1 samples, 0.03%)</title><rect x="98.8174%" y="133" width="0.0348%" height="15" fill="rgb(222,74,54)" fg:x="2841" fg:w="1"/><text x="99.0674%" y="143.50"></text></g><g><title>microphp`DYLD-STUB$$memcpy (3 samples, 0.10%)</title><rect x="98.8522%" y="133" width="0.1043%" height="15" fill="rgb(216,99,12)" fg:x="2842" fg:w="3"/><text x="99.1022%" y="143.50"></text></g><g><title>microphp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (14 samples, 0.49%)</title><rect x="99.0957%" y="117" width="0.4870%" height="15" fill="rgb(226,22,26)" fg:x="2849" fg:w="14"/><text x="99.3457%" y="127.50"></text></g><g><title>microphp`microphp::globals::Globals::is_user_function (171 samples, 5.95%)</title><rect x="93.9478%" y="149" width="5.9478%" height="15" fill="rgb(217,163,10)" fg:x="2701" fg:w="171"/><text x="94.1978%" y="159.50">microphp..</text></g><g><title>microphp`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (27 samples, 0.94%)</title><rect x="98.9565%" y="133" width="0.9391%" height="15" fill="rgb(213,25,53)" fg:x="2845" fg:w="27"/><text x="99.2065%" y="143.50"></text></g><g><title>microphp`hashbrown::map::make_hash (9 samples, 0.31%)</title><rect x="99.5826%" y="117" width="0.3130%" height="15" fill="rgb(252,105,26)" fg:x="2863" fg:w="9"/><text x="99.8326%" y="127.50"></text></g><g><title>all (2,875 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(220,39,43)" fg:x="0" fg:w="2875"/><text x="0.2500%" y="303.50"></text></g><g><title>libdyld.dylib`start (2,875 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(229,68,48)" fg:x="0" fg:w="2875"/><text x="0.2500%" y="287.50">libdyld.dylib`start</text></g><g><title>microphp`main (2,874 samples, 99.97%)</title><rect x="0.0348%" y="261" width="99.9652%" height="15" fill="rgb(252,8,32)" fg:x="1" fg:w="2874"/><text x="0.2848%" y="271.50">microphp`main</text></g><g><title>microphp`std::rt::lang_start_internal (2,874 samples, 99.97%)</title><rect x="0.0348%" y="245" width="99.9652%" height="15" fill="rgb(223,20,43)" fg:x="1" fg:w="2874"/><text x="0.2848%" y="255.50">microphp`std::rt::lang_start_internal</text></g><g><title>microphp`std::rt::lang_start::_{{closure}} (2,874 samples, 99.97%)</title><rect x="0.0348%" y="229" width="99.9652%" height="15" fill="rgb(229,81,49)" fg:x="1" fg:w="2874"/><text x="0.2848%" y="239.50">microphp`std::rt::lang_start::_{{closure}}</text></g><g><title>microphp`std::sys_common::backtrace::__rust_begin_short_backtrace (2,874 samples, 99.97%)</title><rect x="0.0348%" y="213" width="99.9652%" height="15" fill="rgb(236,28,36)" fg:x="1" fg:w="2874"/><text x="0.2848%" y="223.50">microphp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>microphp`microphp::main (2,874 samples, 99.97%)</title><rect x="0.0348%" y="197" width="99.9652%" height="15" fill="rgb(249,185,26)" fg:x="1" fg:w="2874"/><text x="0.2848%" y="207.50">microphp`microphp::main</text></g><g><title>microphp`microphp::vm::run (2,874 samples, 99.97%)</title><rect x="0.0348%" y="181" width="99.9652%" height="15" fill="rgb(249,174,33)" fg:x="1" fg:w="2874"/><text x="0.2848%" y="191.50">microphp`microphp::vm::run</text></g><g><title>microphp`microphp::vm::Machine::run (2,763 samples, 96.10%)</title><rect x="3.8957%" y="165" width="96.1043%" height="15" fill="rgb(233,201,37)" fg:x="112" fg:w="2763"/><text x="4.1457%" y="175.50">microphp`microphp::vm::Machine::run</text></g><g><title>microphp`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3 samples, 0.10%)</title><rect x="99.8957%" y="149" width="0.1043%" height="15" fill="rgb(221,78,26)" fg:x="2872" fg:w="3"/><text x="100.1457%" y="159.50"></text></g></svg></svg>